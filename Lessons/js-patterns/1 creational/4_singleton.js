"use strict";

// Идея паттерна в том, чтобы создать класс в приложении, который будет создавать интсанс,
// который будет и должен существовать исключительно в единственном экземпляре

// Пример работы с базами данных

// Создаем класс Database, который будет создавать инстансы баз данных

class Database {
  //   Создаем статические свойства, которые будут использоваться для проверки наличия инстанса
  constructor(data) {
    //  Проверяем, существует ли инстанс класса Database
    if (Database.exists) {
      // Если инстанс существует, то возвращаем его
      return Database.instance;
    }
    // Если инстанс не существует, то создаем его
    Database.instance = this;
    // Проверяем, существует ли база данных
    Database.exists = true;
    // Добавляем свойство data в инстанс
    this.data = data;
  }

  //   Создаем метод getData(), который будет возвращать свойство data
  getData() {
    return this.data;
  }
}

// Создаем экземпляр mongo класса Database и передаем в него аргумент "MongoDB"

const mongo = new Database("MongoDB");
// Выводим в консоль свойство data экземпляра mongo
console.log(mongo.getData());

// Создаем экземпляр mysql класса Database и передаем в него аргумент "MySQL"
const mysql = new Database("MySQL");
// Выводим в консоль свойство data экземпляра mysql
console.log(mysql.getData());
// Выводим в консоль сравнение экземпляров mongo и mysql
console.log(mongo === mysql);

// Видно, что экземпляры mongo и mysql являются одним и тем же объектом, так как они созданы на основе одного и того же инстанса, который
// был создан в конструкторе класса Database и который существует в единственном экземпляре (singleton, который нельзя переопределить)
