Для хранения информации на клиенте есть куки cookies (устаревшие)

Cookies:

Классический способ хранения ифнормации на клиенте это "куки-файл", 
размещенный на компьютере пользователя. Куки это текстовые строки списка пар 
"ключ=значение" разделенные точкой с запятой. Обычно куки приходят от сервера и позволяют
хранить простые строчные данные.

Но у куки есть несколько ограничений.

 - Они добавляются к каждому запросу на сервер, что может быть излишне
 - Куки позволяют хранить всего до 4 кб данных, что довольно мало
 - Поскольку куки используются для отслеживания поведения людей в серфинге, пользователи
   часто отключают их, а сайты просят каждый раз, нужно ли их устанавливать
 - Используя куки, довольно проблематично отслеживать две или более транзакции на одном 
   и том же сайте, что может происходить одновременно в разных вкладках

И Web Storage API:

Web Storage API - Включает в себя локальное хранилище и хранилище сеансов, 
и предоставляет способ хранения пар "ключ:значение" более интуитивно 
понятным способом, чем использование куки. Данные в веб-хранилище, в отличие от куки,
сохраняются даже при закрытии браузера или выключении компьютера.

Веб-хранилища это часть HTML5 спецификации. Существует два варианта хранения данных:

 - sessionStorage (хранение информации в сессии) - используется для добавления 
   данных в хранилище сеансов, и данные этого хранилища 
   будут доступны для любой страницы с того же сайта, открытого в этом
   окне, т.е. сессии, и как только окно будет закрыто, сеанс будет завершен, а хранилище
   сеансов очищено.

    Пример использования: для хранения заказа пользователя текущего при выборе к примеру
    билетов между тремя вкладками, и вся информация пишется в одно хранилище, и в каждой 
    вкладке одинаково правильная информация о заказе клиента

 - localStorage (хранение некритической информации в локальном хранилище, 
   которая не используется в бекенде, а необходима только на данном браузере 
   этому пользователю) - хранилище, охватывающее несколько окон и сохраняющееся после 
   текущего сеанса. В частности, веб-приложения могут сохранить пользовательские данные,
   такие как настройки профиля или содержимое корзины товаров на стороне клиента.

    Пример использования: сохранение ранее вводимого поста на форуме, после чего был закрыт 
    браузер. Но после восстановления браузера, введенная информация сохранится. 
    Последняя выбранная тема сайта/приложения.

localStorage

(Как его просмотреть в браузере: F12 - вкладка Application - Storage - Local Storage)

Позволяет хранить данные без истечения срока действия в формате пар "ключ:значение" 
на компьютере пользователя и читать их, когда пользователь снова вернется на страницу.

    !В localStorage не хранят методы объектов или функции, только данные!

Использование локального хранилища в современных браузерах очень просто и доступно через 
интерфейс window.localStorage .

Сохранение в локальное хранилище:

Используется метод localStorage.setItem(key, value).

Чтобы сохранить массив объектов, либо объект, необходимо перевести эти данные в формат JSON
с помощью метода JSON.stringify().

Чтение из локального хранилища:

Используется метод localStorage.getItem(key)

При чтении объекта либо массива объектов:
сохраняем метод localStorage.getItem(key) в переменную:
    const persistedSettings = localStorage.getItem('settings');
    const parsedSettings = JSON.parse(persistedSettings);

!!!localStorage сохраняет информацию только в текущем браузере на текущем домене!!!

Для удаления пары "ключ:значение" используется метод localStorage.removeItem(key)

Для полной очистки хранилища используется метод localStorage.clear() (Эта опция редкая в 
использовнаии, поскольку в хранилище сохраняется много полезной информации)

==================================================================================

Для безопасной записи и чтения localStorage:

// storage.js 
// Принимает ключ `key` по которому будет произведена выборка.
const load = key => {
  try {
    const serializedState = localStorage.getItem(key);

    return serializedState === null ? undefined : JSON.parse(serializedState);
  } catch (err) {
    console.log('Get state error: ', err);
  }
};

// Принимает ключ `key` и значение `value`.
const save = (key, value) => {
  try {
    const serializedState = JSON.stringify(value);
    localStorage.setItem(key, serializedState);
  } catch (err) {
    console.log('Set state error: ', err);
  }
};

// Принимает ключ `key` по которому будет произведена выборка и удаление.

const remove = key => {
  try {
    const serializedState = localStorage.removeItem(key);

    return serializedState === null ? undefined : JSON.parse(serializedState);
  } catch (err) {
    console.log('Get state error: ', err);
  }
};

export default { load, save, remove };

Для безопасного удаления localStorage: